name: 🛠️ Build All
on: 
    push:
        tags:
          - '*'
    pull_request:
        paths: [ '**' ]
    workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: ${{ matrix.name }} ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        identifier: [linux, windows, macos, ios, android-arm32, android-arm64, web-nothreads]
        target: [debug, release]
        include:
          - identifier: linux
            platform: linux
            name: 🐧 Linux
            runner: ubuntu-22.04
            flags: arch=x86_64
            
          - identifier: windows
            platform: windows
            name: 🪟 Windows
            runner: ubuntu-22.04
            flags: arch=x86_64

          - identifier: macos
            platform: macos
            name: 🍎 macOS
            runner: macos-latest
            flags: arch=universal

          - identifier: ios
            platform: ios
            name: 🍏 iOS
            runner: macos-latest
            flags: arch=universal

          - identifier: android-arm32
            platform: android
            name: 🤖 Android Arm32
            runner: ubuntu-22.04
            flags: arch=arm32

          - identifier: android-arm64
            platform: android
            name: 🤖 Android Arm64
            runner: ubuntu-22.04
            flags: arch=arm64

          - identifier: web-nothreads
            platform: web
            name: 🌐 Web No-threads
            runner: ubuntu-22.04
            flags: threads=no
    steps:
      - name: Checkout Godot Synth
        uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - name: Setup Base Dependencies
        uses: ./.github/actions/base-deps
        with:
            platform: ${{ matrix.platform }}

      - name: Setup Build Cache
        uses: ./.github/actions/build-cache
        with:
          cache-name: ${{ matrix.identifier }}-${{ matrix.target }}
        continue-on-error: true

      - name: Build Godot Synth
        env:
            SCONS_CACHE: "${{ github.workspace }}/.scons-cache/"
            TARGET: 'template_${{ matrix.target }}'
        shell: sh
        run: |
            scons target=$TARGET platform='${{ matrix.platform }}' ${{ matrix.flags }} debug_symbols=no -j2

      - name: Strip Libraries (Windows/Linux)
        if: ${{ matrix.platform == 'windows' || matrix.platform == 'linux' }}
        shell: sh
        run: |
          ls -l project/addons/godot_synth/bin/
          strip project/addons/godot_synth/bin/libgodot_synth.*
          ls -l project/addons/godot_synth/bin/

      - name: Include Files
        shell: sh
        run: |
          cp '${{ github.workspace }}/README.md' '${{ github.workspace }}/LICENSE' ${{ github.workspace }}/project/addons/godot_synth/

      - name: Upload Package
        uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: t3d-${{ matrix.identifier }}-${{ matrix.target }}
          path: |
            ${{ github.workspace }}/project/

  merge:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          include-hidden-files: true
          name: ${{ github.event.repository.name }}
          pattern: t3d-*
          delete-merged: true

  release:
    runs-on: ubuntu-latest
    needs: merge
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null)
          if [ -z "$latest_tag" ]; then
            latest_tag="v0.0.0"
          fi
          echo ::set-output name=tag::${latest_tag}

      - name: Calculate next version
        id: next_version
        run: |
          latest_tag=${{ steps.get_latest_tag.outputs.tag }}
          echo "Latest tag: $latest_tag"
          if [[ "$latest_tag" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            major=$(echo $latest_tag | cut -d. -f1 | cut -dv -f2)
            minor=$(echo $latest_tag | cut -d. -f2)
            patch=$(echo $latest_tag | cut -d. -f3)
            new_version="v$major.$(($minor + 1)).0"
          else
            new_version="v1.0.0"
          fi
          echo "New version: $new_version"
          echo ::set-output name=version::$new_version

      - name: Create new tag
        run: |
          git tag ${{ steps.next_version.outputs.version }}
          git push origin ${{ steps.next_version.outputs.version }}

      - name: Create GitHub release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.next_version.outputs.version }}
          release_name: Release ${{ steps.next_version.outputs.version }}
          body: |
            New release ${{ steps.next_version.outputs.version }}
          draft: false
          prerelease: false
